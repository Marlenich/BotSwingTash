from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, ConversationHandler
import logging
import sqlite3
import os
from datetime import datetime
import re

# –í–∫–ª—é—á–∏–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

# üîí –ó–ê–©–ò–¢–ê: —Å–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
ALLOWED_COMMANDS = ['start', 'stats', 'publish_', 'check_members', 'cancel']

# üîí –ó–ê–©–ò–¢–ê: ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ (—Ç–æ–ª—å–∫–æ –≤—ã)
ADMIN_IDS = [5870642170]  # ‚Üê –ó–ê–ú–ï–ù–ò–¢–ï –ù–ê –í–ê–® REAL TELEGRAM ID!

# üîí –ó–ê–©–ò–¢–ê: –ó–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö (–∫—Ä–∏–ø—Ç–æ, —Å—Å—ã–ª–∫–∏ –∏ —Ç.–¥.)
BLACKLIST_WORDS = [
    'crypto', 'bitcoin', 'ether', 'usdt', 'bnb', 'solana', 'xrp', 'cardano',
    'dogecoin', 'shiba', 'matic', 'dot', 'avax', 'link', 'ltc', 'ada',
    'http://', 'https://', 't.me/', '@', '.com', '.org', '.net', '.io',
    'airdrop', 'free', 'money', 'investment', 'profit'
]

# –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à –ù–û–í–´–ô —Ç–æ–∫–µ–Ω –æ—Ç @BotFather
BOT_TOKEN = "8406149502:AAG71sNihxvmbw-5JlIZ0Dq_hj1cIt9ZwwE"  # ‚Üê –ó–ê–ú–ï–ù–ò–¢–ï –ù–ê –ù–û–í–´–ô –¢–û–ö–ï–ù!

# –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ ID –≤–∞—à–µ–≥–æ –∫–∞–Ω–∞–ª–∞
CHANNEL_ID = -1003032674443

# –°—Ç–∞–¥–∏–∏ –æ–ø—Ä–æ—Å–∞
(AGE, NAME, GENDER, PARAMS, PARAMS_FEMALE, CITY, LOOKING_FOR, ABOUT, RULES) = range(9)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
gender_keyboard = ReplyKeyboardMarkup([['–ú', '–ñ', '–ü–∞—Ä–∞']], one_time_keyboard=True, resize_keyboard=True)
looking_for_keyboard = ReplyKeyboardMarkup([['–ú', '–ñ', '–ü–∞—Ä–∞']], one_time_keyboard=True, resize_keyboard=True)
rules_keyboard = ReplyKeyboardMarkup([['‚úÖ –°–æ–≥–ª–∞—Å–µ–Ω', '‚ùå –ù–µ —Å–æ–≥–ª–∞—Å–µ–Ω']], one_time_keyboard=True, resize_keyboard=True)

# üîí –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
def security_check(update: Update, context: ContextTypes.DEFAULT_TYPE) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å"""
    if not update.message or not update.message.text:
        return True
    
    text = update.message.text.lower()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞
    for word in BLACKLIST_WORDS:
        if word in text:
            logger.warning(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω–æ–µ —Å–ª–æ–≤–æ: {word} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {update.effective_user.id}")
            return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–∞–Ω–¥—ã (—Ç–æ–ª—å–∫–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ)
    if text.startswith('/'):
        command = text.split(' ')[0].split('@')[0]
        if not any(command.startswith(allowed) for allowed in ALLOWED_COMMANDS):
            logger.warning(f"–ó–∞–ø—Ä–µ—â–µ–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: {command} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {update.effective_user.id}")
            return False
    
    return True

# üîí –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
def is_admin(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    return user_id in ADMIN_IDS

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    conn = sqlite3.connect('profiles.db')
    cursor = conn.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS profiles (
            user_id INTEGER PRIMARY KEY,
            name TEXT,
            gender TEXT,
            params TEXT,
            city TEXT,
            looking_for TEXT,
            about TEXT,
            contact TEXT,
            invite_link TEXT,
            joined BOOLEAN DEFAULT FALSE,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    ''')
    conn.commit()
    conn.close()

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∏–Ω–∞–µ–º –æ–ø—Ä–æ—Å"""
    # üîí –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    if not security_check(update, context):
        await update.message.reply_text("–ö–æ–º–∞–Ω–¥–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ —Å–∏—Å—Ç–µ–º–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏.")
        return ConversationHandler.END
        
    await update.message.reply_text('–ü—Ä–∏–≤–µ—Ç! –°–∫–æ–ª—å–∫–æ –≤–∞–º –ª–µ—Ç? (–æ—Ç–≤–µ—Ç—å—Ç–µ —Ü–∏—Ñ—Ä–∞–º–∏)')
    return AGE

# üîí –û–ë–ù–û–í–õ–ï–ù–ù–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –° –ü–†–û–í–ï–†–ö–û–ô –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò
async def age_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not security_check(update, context):
        return ConversationHandler.END
    # ... –æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ age_handler

async def name_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not security_check(update, context):
        return ConversationHandler.END
    # ... –æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ name_handler

# üîí –ó–ê–©–ò–©–ï–ù–ù–ê–Ø –ö–û–ú–ê–ù–î–ê –°–¢–ê–¢–ò–°–¢–ò–ö–ò
async def show_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∞–Ω–∫–µ—Ç (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
    if not is_admin(update.effective_user.id):
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    if not security_check(update, context):
        return
        
    try:
        conn = sqlite3.connect('profiles.db')
        cursor = conn.cursor()

        cursor.execute('SELECT COUNT(*) FROM profiles')
        total = cursor.fetchone()[0]

        cursor.execute('SELECT COUNT(*) FROM profiles WHERE joined = TRUE')
        published = cursor.fetchone()[0]

        waiting = total - published

        cursor.execute('''
            SELECT user_id, name, created_at
            FROM profiles
            WHERE joined = FALSE
            ORDER BY created_at DESC
            LIMIT 5
        ''')
        recent_waiting = cursor.fetchall()

        conn.close()

        message = f"""
üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–Ω–∫–µ—Ç:
‚Ä¢ –í—Å–µ–≥–æ –∞–Ω–∫–µ—Ç: {total}
‚Ä¢ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ: {published}
‚Ä¢ –û–∂–∏–¥–∞—é—Ç –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {waiting}

üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –æ–∂–∏–¥–∞—é—â–∏—Ö:
"""
        if recent_waiting:
            for profile in recent_waiting:
                user_id, name, created_at = profile
                message += f"‚Ä¢ {name} (ID: {user_id}) - {created_at}\n"
        else:
            message += "–ù–µ—Ç –∞–Ω–∫–µ—Ç –æ–∂–∏–¥–∞—é—â–∏—Ö –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"

        await update.message.reply_text(message)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")

# üîí –ó–ê–©–ò–©–ï–ù–ù–ê–Ø –ö–û–ú–ê–ù–î–ê –ü–†–û–í–ï–†–ö–ò
async def check_all_memberships(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ä—É—á–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
    if not is_admin(update.effective_user.id):
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    if not security_check(update, context):
        return
        
    try:
        await update.message.reply_text("–ù–∞—á–∏–Ω–∞—é –ø—Ä–æ–≤–µ—Ä–∫—É...")
        
        conn = sqlite3.connect('profiles.db')
        cursor = conn.cursor()
        cursor.execute('SELECT user_id FROM profiles WHERE joined = FALSE')
        users_to_check = cursor.fetchall()
        
        published_count = 0
        
        for (user_id,) in users_to_check:
            try:
                member = await context.bot.get_chat_member(CHANNEL_ID, user_id)
                
                if member.status in ['member', 'administrator', 'creator']:
                    profile = get_profile_from_db(user_id)
                    if profile:
                        profile_text = f"""
üë§ –ò–º—è: {profile['name']}
‚ö° {profile['gender']}
üìè –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: {profile['params']}
üèô –ì–æ—Ä–æ–¥: {profile['city']}
‚ù§ –ò—â—É: {profile['looking_for']}
üìû –ö–æ–Ω—Ç–∞–∫—Ç: {profile['contact']}
‚Ñπ –û —Å–µ–±–µ: {profile['about']}
                        """

                        await context.bot.send_message(
                            chat_id=CHANNEL_ID,
                            text=profile_text
                        )

                        mark_profile_as_joined(user_id)
                        published_count += 1
                        await asyncio.sleep(1)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
                        
            except Exception as e:
                continue
                
        conn.close()
        
        await update.message.reply_text(f"‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ –∞–Ω–∫–µ—Ç: {published_count}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ check_all_memberships: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ")

# üîí –ó–ê–©–ò–©–ï–ù–ù–ê–Ø –ö–û–ú–ê–ù–î–ê –ü–£–ë–õ–ò–ö–ê–¶–ò–ò
async def manual_publish(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–†—É—á–Ω–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è –∞–Ω–∫–µ—Ç—ã –ø–æ –∫–æ–º–∞–Ω–¥–µ"""
    if not security_check(update, context):
        return
        
    try:
        command_text = update.message.text
        user_id_match = re.search(r'/publish_(\d+)', command_text)
        
        if not user_id_match:
            await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã.")
            return
            
        user_id = int(user_id_match.group(1))
        
        # –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –∏–ª–∏ –≤–ª–∞–¥–µ–ª–µ—Ü –∞–Ω–∫–µ—Ç—ã
        if not is_admin(update.effective_user.id) and update.effective_user.id != user_id:
            await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
            return
            
        profile = get_profile_from_db(user_id)
        if not profile:
            await update.message.reply_text("–ê–Ω–∫–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞.")
            return
            
        profile_text = f"""
üë§ –ò–º—è: {profile['name']}
‚ö° {profile['gender']}
üìè –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: {profile['params']}
üèô –ì–æ—Ä–æ–¥: {profile['city']}
‚ù§ –ò—â—É: {profile['looking_for']}
üìû –ö–æ–Ω—Ç–∞–∫—Ç: {profile['contact']}
‚Ñπ –û —Å–µ–±–µ: {profile['about']}
        """

        await context.bot.send_message(
            chat_id=CHANNEL_ID,
            text=profile_text
        )

        mark_profile_as_joined(user_id)
        await update.message.reply_text("‚úÖ –ê–Ω–∫–µ—Ç–∞ —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞!")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ manual_publish: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏")

# üîí –ì–õ–û–ë–ê–õ–¨–ù–´–ô –§–ò–õ–¨–¢–† –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò
async def security_filter(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ì–ª–æ–±–∞–ª—å–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
    if not security_check(update, context):
        # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ø—ã—Ç–∫—É –≤–∑–ª–æ–º–∞
        logger.warning(f"–ü–û–ü–´–¢–ö–ê –í–ó–õ–û–ú–ê: {update.effective_user.id} - {update.message.text if update.message else 'No text'}")
        return
    
    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–∞–ª—å—à–µ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    return True

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Å –∑–∞—â–∏—Ç–æ–π"""
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        init_db()

        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–º –æ—à–∏–±–æ–∫
        application = Application.builder().token(BOT_TOKEN).build()

        # üîí –î–æ–±–∞–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        application.add_handler(MessageHandler(filters.ALL & ~filters.COMMAND, security_filter), group=-1)

        # –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∏–∞–ª–æ–≥–∞
        conv_handler = ConversationHandler(
            entry_points=[CommandHandler('start', start)],
            states={
                AGE: [MessageHandler(filters.TEXT & ~filters.COMMAND, age_handler)],
                NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, name_handler)],
                GENDER: [MessageHandler(filters.TEXT & ~filters.COMMAND, gender_handler)],
                PARAMS: [MessageHandler(filters.TEXT & ~filters.COMMAND, params_handler)],
                PARAMS_FEMALE: [MessageHandler(filters.TEXT & ~filters.COMMAND, params_female_handler)],
                CITY: [MessageHandler(filters.TEXT & ~filters.COMMAND, city_handler)],
                LOOKING_FOR: [MessageHandler(filters.TEXT & ~filters.COMMAND, looking_for_handler)],
                ABOUT: [MessageHandler(filters.TEXT & ~filters.COMMAND, about_handler)],
                RULES: [MessageHandler(filters.TEXT & ~filters.COMMAND, rules_handler)],
            },
            fallbacks=[CommandHandler('cancel', cancel)]
        )

        application.add_handler(conv_handler)

        # üîí –ó–∞—â–∏—â–µ–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
        application.add_handler(CommandHandler("stats", show_stats))
        application.add_handler(CommandHandler("check_members", check_all_memberships))
        application.add_handler(MessageHandler(filters.Regex(r'^/publish_\d+'), manual_publish))

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
        application.add_error_handler(error_handler)

        logger.info("üõ°Ô∏è –ó–∞—â–∏—â–µ–Ω–Ω—ã–π –±–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
        application.run_polling()

    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: {e}")

if __name__ == '__main__':
    main()
