from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, ConversationHandler
import logging
import sqlite3
import os
from datetime import datetime
import re
import asyncio

# –í–∫–ª—é—á–∏–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

# üîí –ó–ê–©–ò–¢–ê: —Å–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
ALLOWED_COMMANDS = ['start', 'stats', 'publish_', 'check_members', 'cancel']

# üîí –ó–ê–©–ò–¢–ê: ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ (—Ç–æ–ª—å–∫–æ –≤—ã)
ADMIN_IDS = [5870642170]  # ‚Üê –ó–ê–ú–ï–ù–ò–¢–ï –ù–ê –í–ê–® REAL TELEGRAM ID!

# üîí –ó–ê–©–ò–¢–ê: –ó–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö (–∫—Ä–∏–ø—Ç–æ, —Å—Å—ã–ª–∫–∏ –∏ —Ç.–¥.)
BLACKLIST_WORDS = [
    'crypto', 'bitcoin', 'ether', 'usdt', 'bnb', 'solana', 'xrp', 'cardano',
    'dogecoin', 'shiba', 'matic', 'dot', 'avax', 'link', 'ltc', 'ada',
    'http://', 'https://', 't.me/', '.com', '.org', '.net', '.io',
    'airdrop', 'free', 'money', 'investment', 'profit'
]

# –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à –ù–û–í–´–ô —Ç–æ–∫–µ–Ω –æ—Ç @BotFather
BOT_TOKEN = "8406149502:AAG71sNihxvmbw-5JlIZ0Dq_hj1cIt9ZwwE"  # ‚Üê –ó–ê–ú–ï–ù–ò–¢–ï –ù–ê –ù–û–í–´–ô –¢–û–ö–ï–ù!

# –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ ID –≤–∞—à–µ–≥–æ –∫–∞–Ω–∞–ª–∞
CHANNEL_ID = -1003032674443

# –°—Ç–∞–¥–∏–∏ –æ–ø—Ä–æ—Å–∞
(AGE, NAME, GENDER, PARAMS, PARAMS_FEMALE, CITY, LOOKING_FOR, ABOUT, RULES) = range(9)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
gender_keyboard = ReplyKeyboardMarkup([['–ú', '–ñ', '–ü–∞—Ä–∞']], one_time_keyboard=True, resize_keyboard=True)
looking_for_keyboard = ReplyKeyboardMarkup([['–ú', '–ñ', '–ü–∞—Ä–∞']], one_time_keyboard=True, resize_keyboard=True)
rules_keyboard = ReplyKeyboardMarkup([['‚úÖ –°–æ–≥–ª–∞—Å–µ–Ω', '‚ùå –ù–µ —Å–æ–≥–ª–∞—Å–µ–Ω']], one_time_keyboard=True, resize_keyboard=True)

# üîí –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
def security_check(update: Update, context: ContextTypes.DEFAULT_TYPE) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å"""
    if not update.message or not update.message.text:
        return True
    
    text = update.message.text.lower()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞ (—Ç–æ–ª—å–∫–æ –≤ —Ç–µ–∫—Å—Ç–µ, –Ω–µ –≤ –∫–æ–º–∞–Ω–¥–∞—Ö)
    for word in BLACKLIST_WORDS:
        if word in text and not text.startswith('/'):
            logger.warning(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω–æ–µ —Å–ª–æ–≤–æ: {word} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {update.effective_user.id}")
            return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–∞–Ω–¥—ã (—Ç–æ–ª—å–∫–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ)
    if text.startswith('/'):
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —á–∏—Å—Ç—É—é –∫–æ–º–∞–Ω–¥—É –±–µ–∑ @botname
        command = text.split(' ')[0].split('@')[0]
        allowed_commands = [f'/{cmd}' for cmd in ALLOWED_COMMANDS]
        
        if command not in allowed_commands:
            logger.warning(f"–ó–∞–ø—Ä–µ—â–µ–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: {command} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {update.effective_user.id}")
            return False
    
    return True

# üîí –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
def is_admin(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    return user_id in ADMIN_IDS

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    conn = sqlite3.connect('profiles.db')
    cursor = conn.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS profiles (
            user_id INTEGER PRIMARY KEY,
            name TEXT,
            gender TEXT,
            params TEXT,
            city TEXT,
            looking_for TEXT,
            about TEXT,
            contact TEXT,
            invite_link TEXT,
            joined BOOLEAN DEFAULT FALSE,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    ''')
    conn.commit()
    conn.close()

def get_profile_from_db(user_id):
    """–ü–æ–ª—É—á–∏—Ç—å –∞–Ω–∫–µ—Ç—É –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    try:
        conn = sqlite3.connect('profiles.db')
        cursor = conn.cursor()
        cursor.execute('SELECT * FROM profiles WHERE user_id = ?', (user_id,))
        profile = cursor.fetchone()
        conn.close()
        
        if profile:
            return {
                'user_id': profile[0],
                'name': profile[1],
                'gender': profile[2],
                'params': profile[3],
                'city': profile[4],
                'looking_for': profile[5],
                'about': profile[6],
                'contact': profile[7],
                'invite_link': profile[8]
            }
        return None
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–Ω–∫–µ—Ç—ã: {e}")
        return None

def mark_profile_as_joined(user_id):
    """–ü–æ–º–µ—Ç–∏—Ç—å –∞–Ω–∫–µ—Ç—É –∫–∞–∫ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—É—é"""
    try:
        conn = sqlite3.connect('profiles.db')
        cursor = conn.cursor()
        cursor.execute('UPDATE profiles SET joined = TRUE WHERE user_id = ?', (user_id,))
        conn.commit()
        conn.close()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∞–Ω–∫–µ—Ç—ã: {e}")

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∏–Ω–∞–µ–º –æ–ø—Ä–æ—Å"""
    # üîí –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    if not security_check(update, context):
        await update.message.reply_text("–ö–æ–º–∞–Ω–¥–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ —Å–∏—Å—Ç–µ–º–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏.")
        return ConversationHandler.END
        
    await update.message.reply_text('–ü—Ä–∏–≤–µ—Ç! –°–∫–æ–ª—å–∫–æ –≤–∞–º –ª–µ—Ç? (–æ—Ç–≤–µ—Ç—å—Ç–µ —Ü–∏—Ñ—Ä–∞–º–∏)')
    return AGE

async def age_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑—Ä–∞—Å—Ç–∞"""
    if not security_check(update, context):
        return ConversationHandler.END
        
    try:
        age = int(update.message.text)
        if age < 18 or age > 100:
            await update.message.reply_text('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ä–µ–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç (–æ—Ç 18 –ª–µ—Ç).')
            return AGE
        context.user_data['age'] = age
        await update.message.reply_text('–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:')
        return NAME
    except ValueError:
        await update.message.reply_text('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç —Ü–∏—Ñ—Ä–∞–º–∏:')
        return AGE

async def name_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–º–µ–Ω–∏"""
    if not security_check(update, context):
        return ConversationHandler.END
        
    name = update.message.text.strip()
    if len(name) < 2 or len(name) > 50:
        await update.message.reply_text('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ä–µ–∞–ª—å–Ω–æ–µ –∏–º—è (2-50 —Å–∏–º–≤–æ–ª–æ–≤):')
        return NAME
        
    context.user_data['name'] = name
    await update.message.reply_text('–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –ø–æ–ª:', reply_markup=gender_keyboard)
    return GENDER

async def gender_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª–∞"""
    if not security_check(update, context):
        return ConversationHandler.END
        
    gender = update.message.text
    if gender not in ['–ú', '–ñ', '–ü–∞—Ä–∞']:
        await update.message.reply_text('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:', reply_markup=gender_keyboard)
        return GENDER
        
    context.user_data['gender'] = gender
    
    if gender == '–ú':
        await update.message.reply_text('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (—Ä–æ—Å—Ç, –≤–µ—Å, —Ç–µ–ª–æ—Å–ª–æ–∂–µ–Ω–∏–µ):')
        return PARAMS
    elif gender == '–ñ':
        await update.message.reply_text('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (—Ä–æ—Å—Ç, –≤–µ—Å, –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ñ–∏–≥—É—Ä—ã):')
        return PARAMS_FEMALE
    else:
        await update.message.reply_text('–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–∞—Ä—ã (–≤–æ–∑—Ä–∞—Å—Ç—ã, –≤–Ω–µ—à–Ω–æ—Å—Ç—å):')
        return PARAMS

async def params_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"""
    if not security_check(update, context):
        return ConversationHandler.END
        
    params = update.message.text.strip()
    if len(params) < 5:
        await update.message.reply_text('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:')
        return PARAMS
        
    context.user_data['params'] = params
    await update.message.reply_text('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≥–æ—Ä–æ–¥:')
    return CITY

async def params_female_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è –∂–µ–Ω—â–∏–Ω"""
    if not security_check(update, context):
        return ConversationHandler.END
        
    params = update.message.text.strip()
    if len(params) < 5:
        await update.message.reply_text('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:')
        return PARAMS_FEMALE
        
    context.user_data['params'] = params
    await update.message.reply_text('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≥–æ—Ä–æ–¥:')
    return CITY

async def city_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–æ—Ä–æ–¥–∞"""
    if not security_check(update, context):
        return ConversationHandler.END
        
    city = update.message.text.strip()
    if len(city) < 2:
        await update.message.reply_text('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ä–µ–∞–ª—å–Ω—ã–π –≥–æ—Ä–æ–¥:')
        return CITY
        
    context.user_data['city'] = city
    await update.message.reply_text('–ö–æ–≥–æ –≤—ã –∏—â–µ—Ç–µ?', reply_markup=looking_for_keyboard)
    return LOOKING_FOR

async def looking_for_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∏—Å–∫–∞"""
    if not security_check(update, context):
        return ConversationHandler.END
        
    looking_for = update.message.text
    if looking_for not in ['–ú', '–ñ', '–ü–∞—Ä–∞']:
        await update.message.reply_text('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:', reply_markup=looking_for_keyboard)
        return LOOKING_FOR
        
    context.user_data['looking_for'] = looking_for
    await update.message.reply_text('–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —Å–µ–±–µ (–∏–Ω—Ç–µ—Ä–µ—Å—ã, —É–≤–ª–µ—á–µ–Ω–∏—è, —á—Ç–æ –∏—â–µ—Ç–µ):')
    return ABOUT

async def about_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ–±–µ"""
    if not security_check(update, context):
        return ConversationHandler.END
        
    about = update.message.text.strip()
    if len(about) < 10:
        await update.message.reply_text('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ –æ —Å–µ–±–µ (–º–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤):')
        return ABOUT
        
    context.user_data['about'] = about
    await update.message.reply_text('''üìù –ü—Ä–∞–≤–∏–ª–∞ –∫–∞–Ω–∞–ª–∞:
‚ùå‚≠ïÔ∏è   –ß–ò–¢–ê–ï–ú –í–ù–ò–ú–ê–¢–ï–õ–¨–ù–û!     ‚ùå‚≠ïÔ∏è

‚ö†Ô∏è–í–æ–∑—Ä–∞—Å—Ç —Å—Ç—Ä–æ–≥–æ —Å 23 –ª–µ—Ç. (–º–æ–ª–æ–∂–µ 23 –ª–µ—Ç, –ø–æ–ø–∞–¥–∞—é—Ç –≤ –ë–ê–ù)

–û–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —Ç–æ–ª—å–∫–æ –Ω–∞ –†—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ, –Ω–∞ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö!

–û–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –≤—ã–≤–µ—à–∏–≤–∞–Ω–∏—è –∞–Ω–∫–µ—Ç—ã!

–û–±—â–µ–Ω–∏–µ –±–µ–∑ –∞–Ω–∫–µ—Ç—ã = –ë–ê–ù ‚õîÔ∏è

‚õîÔ∏è–ó–ê–ü–†–ï–©–ï–ù–û:
–û—Å–∫–æ—Ä–±–ª—è—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤. 
–ú–∞—Ç. 
–ó–∞—Ç—Ä–∞–≥–∏–≤–∞—Ç—å —Ä–µ–ª–∏–≥–∏–æ–∑–Ω—ã–µ, –Ω–∞—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ, –ø–æ–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ, 
–û–±—Å—É–∂–¥–µ–Ω–∏–µ –°–í–û, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –≤ –∏–º–µ–Ω–∏ –∏ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö —É–∫—Ä–∞–∏–Ω—Å–∫–æ–π —Å–∏–º–≤–æ–ª–∏–∫–∏, —É—â–µ–º–ª—è—é—â–∏–µ –¥—Ä—É–≥–∏—Ö —Ç–µ–º—ã. 
–í—ã–≤–µ—à–∏–≤–∞—Ç—å —Ñ–æ—Ç–æ —Å –≥–æ–ª—ã–º–∏ –∏–Ω—Ç–∏–º–Ω—ã–º–∏ —á–∞—Å—Ç—è–º–∏ —Ç–µ–ª–∞. 
–§–æ—Ç–æ –∏–º–∏—Ç–∞—Ü–∏–∏ —Å–µ–∫—Å–∞ –¥–∞–∂–µ –µ—Å–ª–∏ –Ω–µ –≤–∏–¥–Ω–æ –≤–∞–∂–Ω—ã—Ö –º–µ—Å—Ç.
–õ—é–±–æ–π –ø–æ—Ä–Ω–æ –∏ —ç—Ä–æ –∫–æ–Ω—Ç–µ–Ω—Ç, –≤–∫–ª—é—á–∞—è —Å–µ–∫—Å —Ç–æ–≤–∞—Ä—ã.
–†–µ–∫–ª–∞–º–∞. –°—Å—ã–ª–∫–∏. –°–ø–∞–º. 
–ü—Ä–æ–ø–∞–≥–∞–Ω–¥–∞ –Ω–∞—Ä–∫–æ—Ç–∏–∫–æ–≤, –ø—Ä–æ—Å—Ç–∏—Ç—É—Ü–∏–∏, –õ–ì–ë–¢.
–û–±—Å—É–∂–¥–µ–Ω–∏–µ –Ω–µ—Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω–æ–π —Å–µ–∫—Å—É–∞–ª—å–Ω–æ–π –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏.
–£—â–µ–º–ª–µ–Ω–∏–µ —Å–µ–∫—Å –º–µ–Ω—å—à–∏–Ω—Å—Ç–≤. 
–ó–∞–ø—Ä–µ—â–∞–µ—Ç—Å—è —É–¥–∞–ª—è—Ç—å —Ä–∞–Ω–µ–µ –Ω–∞–ø–∏—Å–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è!
–ó–∞–ø—Ä–µ—â–µ–Ω–æ –ø–∏—Å–∞—Ç—å –≤ –õ–° –±–µ–∑ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è!

‚õîÔ∏è‚õîÔ∏è‚õîÔ∏è–ó–∞ –Ω–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª –ë–ê–ù‚õîÔ∏è‚õîÔ∏è‚õîÔ∏è

‚ôªÔ∏è–ü–æ–≤—Ç–æ—Ä–Ω—ã–π –≤—Ö–æ–¥ –≤ —á–∞—Ç –ø–æ—Å–ª–µ –ë–ê–ù–∞ –ü–õ–ê–¢–ù–´–ô‚ö†Ô∏è
‚úÖ –ù–∞–∂–∏–º–∞—è "–°–æ–≥–ª–∞—Å–µ–Ω", –≤—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ, —á—Ç–æ –æ–∑–Ω–∞–∫–æ–º–∏–ª–∏—Å—å —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏ –∏ —Å–æ–≥–ª–∞—Å–Ω—ã –Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—é –≤–∞—à–µ–π –∞–Ω–∫–µ—Ç—ã.''', reply_markup=rules_keyboard)
    return RULES

async def rules_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–≥–ª–∞—Å–∏—è —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏"""
    if not security_check(update, context):
        return ConversationHandler.END
        
    choice = update.message.text
    if choice == '‚úÖ –°–æ–≥–ª–∞—Å–µ–Ω':
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–Ω–∫–µ—Ç—É –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        user_id = update.effective_user.id
        user_data = context.user_data
        
        conn = sqlite3.connect('profiles.db')
        cursor = conn.cursor()
        
        cursor.execute('''
            INSERT OR REPLACE INTO profiles 
            (user_id, name, gender, params, city, looking_for, about, contact, invite_link)
            VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
        ''', (
            user_id,
            user_data.get('name'),
            user_data.get('gender'),
            user_data.get('params'),
            user_data.get('city'),
            user_data.get('looking_for'),
            user_data.get('about'),
            f"@{update.effective_user.username}" if update.effective_user.username else f"ID: {user_id}",
            f"https://t.me/{update.effective_user.username}" if update.effective_user.username else ""
        ))
        
        conn.commit()
        conn.close()
        
        await update.message.reply_text('''‚úÖ –í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!

üìã –î–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∞–Ω–∫–µ—Ç—ã –≤–∞–º –Ω—É–∂–Ω–æ:
1. –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª
2. –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥—É /publish

–í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞ –∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞ –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏.''')
        
        return ConversationHandler.END
    else:
        await update.message.reply_text('‚ùå –í—ã –Ω–µ —Å–æ–≥–ª–∞—Å–∏–ª–∏—Å—å —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏. –ê–Ω–∫–µ—Ç–∞ –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.')
        return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–º–µ–Ω–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞–Ω–∫–µ—Ç—ã"""
    await update.message.reply_text('–°–æ–∑–¥–∞–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã –æ—Ç–º–µ–Ω–µ–Ω–æ.')
    return ConversationHandler.END

# üîí –ó–ê–©–ò–©–ï–ù–ù–ê–Ø –ö–û–ú–ê–ù–î–ê –°–¢–ê–¢–ò–°–¢–ò–ö–ò
async def show_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∞–Ω–∫–µ—Ç (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
    if not is_admin(update.effective_user.id):
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    if not security_check(update, context):
        return
        
    try:
        conn = sqlite3.connect('profiles.db')
        cursor = conn.cursor()

        cursor.execute('SELECT COUNT(*) FROM profiles')
        total = cursor.fetchone()[0]

        cursor.execute('SELECT COUNT(*) FROM profiles WHERE joined = TRUE')
        published = cursor.fetchone()[0]

        waiting = total - published

        cursor.execute('''
            SELECT user_id, name, created_at
            FROM profiles
            WHERE joined = FALSE
            ORDER BY created_at DESC
            LIMIT 5
        ''')
        recent_waiting = cursor.fetchall()

        conn.close()

        message = f"""
üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–Ω–∫–µ—Ç:
‚Ä¢ –í—Å–µ–≥–æ –∞–Ω–∫–µ—Ç: {total}
‚Ä¢ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ: {published}
‚Ä¢ –û–∂–∏–¥–∞—é—Ç –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {waiting}

üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –æ–∂–∏–¥–∞—é—â–∏—Ö:
"""
        if recent_waiting:
            for profile in recent_waiting:
                user_id, name, created_at = profile
                message += f"‚Ä¢ {name} (ID: {user_id}) - {created_at}\n"
        else:
            message += "–ù–µ—Ç –∞–Ω–∫–µ—Ç –æ–∂–∏–¥–∞—é—â–∏—Ö –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"

        await update.message.reply_text(message)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")

# üîí –ó–ê–©–ò–©–ï–ù–ù–ê–Ø –ö–û–ú–ê–ù–î–ê –ü–†–û–í–ï–†–ö–ò
async def check_all_memberships(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ä—É—á–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
    if not is_admin(update.effective_user.id):
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    if not security_check(update, context):
        return
        
    try:
        await update.message.reply_text("–ù–∞—á–∏–Ω–∞—é –ø—Ä–æ–≤–µ—Ä–∫—É...")
        
        conn = sqlite3.connect('profiles.db')
        cursor = conn.cursor()
        cursor.execute('SELECT user_id FROM profiles WHERE joined = FALSE')
        users_to_check = cursor.fetchall()
        
        published_count = 0
        
        for (user_id,) in users_to_check:
            try:
                member = await context.bot.get_chat_member(CHANNEL_ID, user_id)
                
                if member.status in ['member', 'administrator', 'creator']:
                    profile = get_profile_from_db(user_id)
                    if profile:
                        profile_text = f"""
üë§ –ò–º—è: {profile['name']}
‚ö° {profile['gender']}
üìè –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: {profile['params']}
üèô –ì–æ—Ä–æ–¥: {profile['city']}
‚ù§ –ò—â—É: {profile['looking_for']}
üìû –ö–æ–Ω—Ç–∞–∫—Ç: {profile['contact']}
‚Ñπ –û —Å–µ–±–µ: {profile['about']}
                        """

                        await context.bot.send_message(
                            chat_id=CHANNEL_ID,
                            text=profile_text
                        )

                        mark_profile_as_joined(user_id)
                        published_count += 1
                        await asyncio.sleep(1)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
                        
            except Exception as e:
                continue
                
        conn.close()
        
        await update.message.reply_text(f"‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ –∞–Ω–∫–µ—Ç: {published_count}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ check_all_memberships: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ")

# üîí –ó–ê–©–ò–©–ï–ù–ù–ê–Ø –ö–û–ú–ê–ù–î–ê –ü–£–ë–õ–ò–ö–ê–¶–ò–ò
async def manual_publish(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–†—É—á–Ω–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è –∞–Ω–∫–µ—Ç—ã –ø–æ –∫–æ–º–∞–Ω–¥–µ"""
    if not security_check(update, context):
        return
        
    try:
        command_text = update.message.text
        user_id_match = re.search(r'/publish_(\d+)', command_text)
        
        if not user_id_match:
            await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã.")
            return
            
        user_id = int(user_id_match.group(1))
        
        # –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –∏–ª–∏ –≤–ª–∞–¥–µ–ª–µ—Ü –∞–Ω–∫–µ—Ç—ã
        if not is_admin(update.effective_user.id) and update.effective_user.id != user_id:
            await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
            return
            
        profile = get_profile_from_db(user_id)
        if not profile:
            await update.message.reply_text("–ê–Ω–∫–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞.")
            return
            
        profile_text = f"""
üë§ –ò–º—è: {profile['name']}
‚ö° {profile['gender']}
üìè –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: {profile['params']}
üèô –ì–æ—Ä–æ–¥: {profile['city']}
‚ù§ –ò—â—É: {profile['looking_for']}
üìû –ö–æ–Ω—Ç–∞–∫—Ç: {profile['contact']}
‚Ñπ –û —Å–µ–±–µ: {profile['about']}
        """

        await context.bot.send_message(
            chat_id=CHANNEL_ID,
            text=profile_text
        )

        mark_profile_as_joined(user_id)
        await update.message.reply_text("‚úÖ –ê–Ω–∫–µ—Ç–∞ —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞!")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ manual_publish: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏")

# üîí –ì–õ–û–ë–ê–õ–¨–ù–´–ô –§–ò–õ–¨–¢–† –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò
async def security_filter(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ì–ª–æ–±–∞–ª—å–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
    if not security_check(update, context):
        # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ø—ã—Ç–∫—É –≤–∑–ª–æ–º–∞
        logger.warning(f"–ü–û–ü–´–¢–ö–ê –í–ó–õ–û–ú–ê: {update.effective_user.id} - {update.message.text if update.message else 'No text'}")
        return
    
    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–∞–ª—å—à–µ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    return True

def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
    logger.error(f"–û—à–∏–±–∫–∞: {context.error}")
    if update and update.message:
        update.message.reply_text('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.')

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Å –∑–∞—â–∏—Ç–æ–π"""
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        init_db()

        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–º –æ—à–∏–±–æ–∫
        application = Application.builder().token(BOT_TOKEN).build()

        # üîí –î–æ–±–∞–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        application.add_handler(MessageHandler(filters.ALL & ~filters.COMMAND, security_filter), group=-1)

        # –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∏–∞–ª–æ–≥–∞
        conv_handler = ConversationHandler(
            entry_points=[CommandHandler('start', start)],
            states={
                AGE: [MessageHandler(filters.TEXT & ~filters.COMMAND, age_handler)],
                NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, name_handler)],
                GENDER: [MessageHandler(filters.TEXT & ~filters.COMMAND, gender_handler)],
                PARAMS: [MessageHandler(filters.TEXT & ~filters.COMMAND, params_handler)],
                PARAMS_FEMALE: [MessageHandler(filters.TEXT & ~filters.COMMAND, params_female_handler)],
                CITY: [MessageHandler(filters.TEXT & ~filters.COMMAND, city_handler)],
                LOOKING_FOR: [MessageHandler(filters.TEXT & ~filters.COMMAND, looking_for_handler)],
                ABOUT: [MessageHandler(filters.TEXT & ~filters.COMMAND, about_handler)],
                RULES: [MessageHandler(filters.TEXT & ~filters.COMMAND, rules_handler)],
            },
            fallbacks=[CommandHandler('cancel', cancel)]
        )

        application.add_handler(conv_handler)

        # üîí –ó–∞—â–∏—â–µ–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
        application.add_handler(CommandHandler("stats", show_stats))
        application.add_handler(CommandHandler("check_members", check_all_memberships))
        application.add_handler(MessageHandler(filters.Regex(r'^/publish_\d+'), manual_publish))

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
        application.add_error_handler(error_handler)

        logger.info("üõ°Ô∏è –ó–∞—â–∏—â–µ–Ω–Ω—ã–π –±–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
        application.run_polling()

    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: {e}")

if __name__ == '__main__':
    main()
